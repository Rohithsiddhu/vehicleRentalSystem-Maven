package com.example.vehiclerentalsystem.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.example.vehiclerentalsystem.serviceimpl.UserServiceImpl;
import com.hexaware.airticketbooking.config.UserInfoUserDetailsService;

@Configuration
@EnableWebSecurity 

public class SecurityConfig {
	 @Bean
	    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		 return http.csrf().disable()               
	                .authorizeHttpRequests()
	                .requestMatchers("/api/admin/authenticate","/api/admin/addadmin","/api/user/adduser","/api/login/adminlogin","/api/login/userlogin","/api/login/flightownerlogin", "/v3/api-docs/**", "/swagger-ui/**","/swagger-resources/**").permitAll()
	                .and()
	                .authorizeHttpRequests().requestMatchers("/api/user/**","/api/admin/**","/api/flightowner/**","/api/flight/**","/api/passenger/**","/api/ticket/**","/api/payment/**")
	                .authenticated().and() //.formLogin().and().build();
	                .sessionManagement()
	                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
	                .and()
	                .authenticationProvider(authenticationProvider())
	                .addFilterBefore(authFilter,UsernamePasswordAuthenticationFilter.class)
	                .build();
	    }
	 @Bean
	    public PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }

	    @Bean
	    public AuthenticationProvider authenticationProvider(){   //normal spring security + JWT
	        DaoAuthenticationProvider authenticationProvider=new DaoAuthenticationProvider();
	        authenticationProvider.setUserDetailsService(userService);
	        authenticationProvider.setPasswordEncoder(passwordEncoder());
	        return authenticationProvider;
	    }
	    
	        @Bean
	    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
	    	
	    	return config.getAuthenticationManager();
	    	
	    }
	        @Bean

	        public IUserService userDetailsService() {   //noraml spring security+JWT
	            return new UserServiceImpl();
	        }
}
